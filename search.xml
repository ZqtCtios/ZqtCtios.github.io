<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>03_神经网络_Neura_ Network</title>
      <link href="2020/12/06/machinelearning/wu-en-da-ji-qi-xue-xi/neural-networks/"/>
      <url>2020/12/06/machinelearning/wu-en-da-ji-qi-xue-xi/neural-networks/</url>
      
        <content type="html"><![CDATA[<h1 id="神经网络Neural-Network"><a href="#神经网络Neural-Network" class="headerlink" title="神经网络Neural Network"></a>神经网络Neural Network</h1><h2 id="1-非线性假设"><a href="#1-非线性假设" class="headerlink" title="1.非线性假设"></a>1.非线性假设</h2><p>线性回归还是逻辑回归都有这样一个缺点，即:当特征太多时， 计算的负荷会非常大。例如下面的例子：</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206183433.png" alt="示例图"></p><p>之前我们已经看到过，使用非线性的多项式项，能够帮助我们建立更好的分类模型。假设我们有非常多的特征, 例如大于 100 个变量, 我们希望用这 100 个特征来构建一个非线性的多项式模型, 结果将是数量非常惊人的特征组合, 即便我们只采用两两特征的组合 $\left(x_{1} x_{2}+\right.\left.x_{1} x_{3}+x_{1} x_{4}+\ldots+x_{2} x_{3}+x_{2} x_{4}+\ldots+x_{99} x_{100}\right),$ 我们也会有接近 5000 个组合而成的特征。这对于一般的逻辑回归来说需要计算的特征太多了。</p><p>假设我们希望训练一个模型来识别视觉对象（例如识别一张图片上是否是一辆汽车）， 我们怎样才能这么做呢?一种方法是我们利用很多汽车的图片和很多非汽车的图片，然后利用这些图片上一个个像素的值（饱和度或亮度）来作为特征。</p><p>假如我们只选用灰度图片，每个像素则只有一个值（而非 RGB 值），我们可以选取图片上的两个不同位置上的两个像素，然后训练一个逻辑回归算法利用这两个像素的值来判断图片上是否是汽车:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206183716.png" alt="汽车识别"></p><p>假使我们采用的都是 50x50 像素的小图片，并且我们将所有的像素视为特征，则会有 2500 个特征，如果我们要进一步将两两特征组合构成一个多项式模型，则会有约25002/2个 （接近 3 百万个）特征。普通的逻辑回归模型，不能有效地处理这么多的特征，这时候我们需要神经网络。</p><h2 id="2-模型表示-1"><a href="#2-模型表示-1" class="headerlink" title="2.模型表示 1"></a>2.模型表示 1</h2><p>为了构建神经网络模型，我们需要首先思考大脑中的神经网络是怎样的?每一个神经元 都可以被认为是一个处理单元/神经核（processing unit/Nucleus），它含有许多输入/树突 （input/Dendrite），并且有一个输出/轴突（output/Axon）。神经网络是大量神经元相互链 接并通过电脉冲来交流的一个网络。</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223440.png" alt="人体神经网络图"></p><p>神经网络模型建立在很多神经元之上，每一个神经元又是一个个学习模型。这些神经元 （也叫激活单元，activation unit）采纳一些特征作为输出，并且根据本身的模型提供一个输出。下图是一个以逻辑回归模型作为自身学习模型的神经元示例，在神经网络中，参数又可 被成为权重（weight）。</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206184747.png" alt="神经元示例"></p><p>我们设计出了类似于神经元的神经网络，效果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223511.png" alt="神经网络模型"></p><p>其中 $x_{1}, x_{2}, x_{3}$ 是输入单元（input units），我们将原始数据输入给它们。$a_{1}, a_{2}, a_{3}$ 是中间单元，它们负责将数据进行处理，然后呈递到下一层。最后是输出单元，它负责计算 $h_{\theta}(x)$ 。</p><p>神经网络模型是许多逻辑单元按照不同层级组织起来的网络，每一层的输出变量都是下 一层的输入变量。下图为一个 3 层的神经网络，第一层成为输入层（Input Layer），最后一 层称为输出层（Output Layer），中间一层成为隐藏层（Hidden Layers）。我们为每一层都增 加一个偏差单位（bias unit），下面引入一些标记法来帮助描述模型:</p><p>$a_{i}^{(j)}$ 代表第j 层的第 $i$ 个激活单元。 $\theta^{(j)}$ 代表从第 $j$ 层映射到第 $j+1$ 层时的权重的矩阵，例如 $\theta^{(1)}$ 代表从第一层映射到第二层的权重的矩阵。其尺寸为: 以第 $j+1$ 层的激活单元数量为行数，以第 $j$ 层的激活单元数加一为列数的矩阵。例如：上图所示的神经网络中$\theta^{(1)}$ 的尺寸为 $3^{*} 4$ 。</p><p>对于上图所示的模型，激活单元和输出分别表达为:</p><script type="math/tex; mode=display">\begin{array}{l}a_{1}^{(2)}=g\left(\Theta_{10}^{(1)} x_{0}+\Theta_{11}^{(1)} x_{1}+\Theta_{12}^{(1)} x_{2}+\Theta_{13}^{(1)} x_{3}\right) \\a_{2}^{(2)}=g\left(\theta_{20}^{(1)} x_{0}+\Theta_{21}^{(1)} x_{1}+\Theta_{22}^{(1)} x_{2}+\theta_{23}^{(1)} x_{3}\right) \\a_{3}^{(2)}=g\left(\theta_{30}^{(1)} x_{0}+\Theta_{31}^{(1)} x_{1}+\theta_{32}^{(1)} x_{2}+\theta_{33}^{(1)} x_{3}\right) \\h_{\theta}(x)=g\left(\Theta_{10}^{(2)} a_{0}^{(2)}+\Theta_{11}^{(2)} a_{1}^{(2)}+\Theta_{12}^{(2)} a_{2}^{(2)}+\Theta_{13}^{(2)} a_{3}^{(2)}\right)\end{array}</script><p>上面进行的讨论中只是将特征矩阵中的一行（一个训练实例）喂给了神经网络，我们需要将整个训练集都喂给我们的神经网络算法来学习模型。</p><p>我们可以知道:每一个𝑎都是由上一层所有的𝑥和每一个𝑥所对应的决定的。 （我们把这样从左到右的算法称为前向传播算法（FORWARD PROPAGATION））</p><p>把𝑥, 𝜃, 𝑎 分别用矩阵表示，我们可以得到𝜃 ⋅ 𝑋 = 𝑎 :</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223520.png" alt="image-20201206185810317"></p><h2 id="3-模型表示-2"><a href="#3-模型表示-2" class="headerlink" title="3.模型表示 2"></a>3.模型表示 2</h2><p>（FORWARD PROPAGATION）相对于使用循环来编码，利用向量化的方法会使得计算更 为简便。以上面的神经网络为例，试着计算第二层的值:</p><script type="math/tex; mode=display">x=\left[\begin{array}{l}x_{0} \\x_{1} \\x_{2} \\x_{3}\end{array}\right] \quad z^{(2)}=\left[\begin{array}{l}z_{1}^{(2)} \\z_{2}^{(2)} \\z_{3}^{(2)}\end{array}\right]</script><script type="math/tex; mode=display">\begin{array}{l}z^{(2)}=\Theta^{(1)} x \\a^{(2)}=g\left(z^{(2)}\right)\end{array}</script><script type="math/tex; mode=display">g\left(\left[\begin{array}{llll}\theta_{10}^{(1)} & \theta_{11}^{(1)} & \theta_{12}^{(1)} & \theta_{13}^{(1)} \\\theta_{20}^{(1)} & \theta_{21}^{(1)} & \theta_{22}^{(1)} & \theta_{23}^{(1)} \\\theta_{30}^{(1)} & \theta_{31}^{(1)} & \theta_{32}^{(1)} & \theta_{33}^{(1)}\end{array}\right] \times\left[\begin{array}{l}x_{0} \\x_{1} \\x_{2} \\x_{3}\end{array}\right]\right)=g\left(\left[\begin{array}{l}\theta_{10}^{(1)} x_{0}+\theta_{11}^{(1)} x_{1}+\theta_{12}^{(1)} x_{2}+\theta_{13}^{(1)} x_{3} \\\theta_{20}^{(1)} x_{0}+\theta_{21}^{(1)} x_{1}+\theta_{22}^{(1)} x_{2}+\theta_{23}^{(1)} x_{3} \\\theta_{30}^{(1)} x_{0}+\theta_{31}^{(1)} x_{1}+\theta_{32}^{(1)} x_{2}+\theta_{33}^{(1)} x_{3}\end{array}\right]\right)=\left[\begin{array}{l}a_{1}^{(2)} \\a_{2}^{(2)} \\a_{3}^{(2)}\end{array}\right]</script><p>我们令 $z^{(2)}=\theta^{(1)} x,$ 则 $a^{(2)}=g\left(z^{(2)}\right),$ 计算后添加 $a_{0}^{(2)}=1$。计算输出的值为 :</p><script type="math/tex; mode=display">\left.g\left(\left[\begin{array}{llll}\theta_{10}^{(2)} & \theta_{11}^{(2)} & \theta_{12}^{(2)} & \theta_{13}^{(2)}\end{array}\right] \times \mid \begin{array}{l}u_{0} \\a_{1}^{(2)} \\a_{2}^{(2)} \\a_{3}^{(2)}\end{array}\right]\right)=g\left(\theta_{10}^{(2)} a_{0}^{(2)}+\theta_{11}^{(2)} a_{1}^{(2)}+\theta_{12}^{(2)} a_{2}^{(2)}+\theta_{13}^{(2)} a_{3}^{(2)}\right)=h_{\theta}(x)</script><p>我们令 $z^{(3)}=\theta^{(2)} a^{(2)},$ 则 $h_{\theta}(x)=a^{(3)}=g\left(z^{(3)}\right)$ 。</p><p>这只是针对训练集中一个训练实例所进行的计算。如果我们要对整个训练集进行计算， 我们需要将训练集特征矩阵进行转置，使得同一个实例的特征都在同一列里。即:</p><script type="math/tex; mode=display">\begin{array}{l}z^{(2)}=\Theta^{(1)} \times X^{T} \\a^{(2)}=g\left(z^{(2)}\right)\end{array}</script><p>为了更好了了解 Neuron Networks 的工作原理，我们先把左半部分遮住:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206192646.png" alt="遮住"></p><p>其实神经网络就像是 logistic regression， 只不过我们把 logistic regression 中的输入向量<br>$\left[x_{1} \sim x_{3}\right]$ 变成了中间层的 $\left[a_{1}^{(2)} \sim a_{3}^{(2)}\right],$ 即:</p><p>$h_{\theta}(x)=g\left(\theta_{0}^{(2)} a_{0}^{(2)}+\theta_{1}^{(2)} a_{1}^{(2)}+\theta_{2}^{(2)} a_{2}^{(2)}+\theta_{3}^{(2)} a_{3}^{(2)}\right)$</p><p>我们可以把 $a_{0}, a_{1}, a_{2}, a_{3}$ 看成更为高级的特征值, 也就是 $x_{0}, x_{1}, x_{2}, x_{3}$ 的进化体, 并且它们是由 $x$ 与决定的, 因为是梯度下降的，所以 $a$ 是变化的，并且变得越来越厉害，所以这些更高级的特征值远比仅仅将 $x$ 次方厉害，也能更好的预测新数据。这就是神经网络相比于逻辑回归和线性回归的优势。</p><h2 id="4-特征和直观理解-1"><a href="#4-特征和直观理解-1" class="headerlink" title="4.特征和直观理解 1"></a>4.特征和直观理解 1</h2><p>神经网络中，单层神经元（无中间层）的计算可用来表示逻辑运算，比如逻辑与（AND）、 逻辑或（OR）。</p><p>举例说明:逻辑与（AND）;下图中左半部分是神经网络的设计与 output 层表达式，右边 上部分是 sigmod 函数，下半部分是真值表。</p><p>我们可以用这样的一个神经网络表示 AND 函数:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206194031.png" alt="神经网络表示 AND 函数"></p><p>其中 $\theta_{0}=-30, \theta_{1}=20, \theta_{2}=20$ 我们的输出函数 $h_{\theta}(x)$ 即为: $h_{\theta}(x)=g\left(-30+20 x_{1}+20 x_{2}\right)$</p><p>我们知道 $g(x)$ 的图像是:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206194157.png" alt="Sigmoid Function"></p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223530.png" alt="image-20201206194239927"></p><p>所以我们有: $h_{\theta}(x) \approx \mathrm{x}_{1} \mathrm{AND} \mathrm{x}_{2}$<br>接下来再介绍一个 OR 函数:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206194319.png" alt="OR 函数"></p><h2 id="5-样本和直观理解-II"><a href="#5-样本和直观理解-II" class="headerlink" title="5.样本和直观理解 II"></a>5.样本和直观理解 II</h2><p>二元逻辑运算符（BINARY LOGICAL OPERATORS）当输入特征为布尔值（0 或 1）时，我 们可以用一个单一的激活层可以作为二元逻辑运算符，为了表示不同的运算符，我们只需要 选择不同的权重即可。</p><p>下图的神经元（三个权重分别为-30，20，20）可以被视为作用同于逻辑与（AND）:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206222420.png" alt="AND"></p><p>下图的神经元（三个权重分别为-10，20，20）可以被视为作用等同于逻辑或（OR）:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223540.png" alt="OR"></p><p>下图的神经元（两个权重分别为 10，-20）可以被视为作用等同于逻辑非（NOT）:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223543.png" alt="NOT"></p><p>我们可以利用神经元来组合成更为复杂的神经网络以实现更复杂的运算。例如我们要实现 XNOR 功能（输入的两个值必须一样，均为 1 或均为 0），即:</p><script type="math/tex; mode=display">\mathrm{XNOR}=\left(\mathrm{x}_{1} \mathrm{AND} \mathrm{x}_{2}\right) \mathrm{OR}\left(\left(\mathrm{NOT} \mathrm{x}_{1}\right) \mathrm{AND}\left(\mathrm{NOT} \mathrm{x}_{2}\right)\right)</script><p>首先构造一个能表达$(NOTx_{1}) AND(NOT x_{2})$ 部分的神经元:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223611.png" alt="AND"></p><p>然后将表示 AND 的神经元和表示 $\left(\mathrm{NOT} \mathrm{x}_{1}\right) \mathrm{AND}\left(\mathrm{NOT} \mathrm{x}_{2}\right)$ 的神经元以及表示 $\mathrm{OR}$ 的神经元进行组合:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206222706.png" alt="XNOR"></p><p>按这种方法我们可以逐渐构造出越来越复杂的函数，也能得到更加厉害的特征值。 这就是神经网络的厉害之处。</p><h2 id="6-多类分类"><a href="#6-多类分类" class="headerlink" title="6.多类分类"></a>6.多类分类</h2><p>当我们有不止两种分类时 （也就是 $y=1,2,3 \ldots $.）比如以下这种情况，该怎么办？如果我们要训练一个神经网络算法来识别路人、汽车、摩托车和卡车，在输出层我们应该有 4 个值。例如，第一个值为 1 或 0 用于预测是否是行人，第二个值用于判断是否为汽车。输入向量x有三个维度，两个中间层，输出层 4 个神经元分别用来表示 4 类，也就是每一个数据在输出层都会出现$[a,b,c,d]^{T},$ 且 $a, b, c, d$ 中仅有一个为 $1,$ 表示当前类。下面是该神经网络的可能结构示例:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206223146.png" alt="多类分类网络"></p>]]></content>
      
      
      <categories>
          
          <category> 吴恩达——机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达 </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02_逻辑回归_Logistic_Regression</title>
      <link href="2020/12/03/machinelearning/wu-en-da-ji-qi-xue-xi/logistic-regression/"/>
      <url>2020/12/03/machinelearning/wu-en-da-ji-qi-xue-xi/logistic-regression/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑回归（Logistic-Regression）"><a href="#逻辑回归（Logistic-Regression）" class="headerlink" title="逻辑回归（Logistic Regression）"></a>逻辑回归（Logistic Regression）</h1><h2 id="1-分类问题（Classification）"><a href="#1-分类问题（Classification）" class="headerlink" title="1.分类问题（Classification）"></a>1.分类问题（Classification）</h2><p>分类问题中，需要预测的变量y是离散的值</p><h2 id="2-假说表示"><a href="#2-假说表示" class="headerlink" title="2.假说表示"></a>2.假说表示</h2><p>逻辑回归模型的假设是: $\quad h_{\theta}(x)=g\left(\theta^{T} X\right)$ 其中: $\quad X$ 代表特征向量 $g$ 代表逻辑函数（logistic function)是一个常用的逻辑函数为 S 形函数(Sigmoid function)，公式为:</p><script type="math/tex; mode=display">g(z)=\frac{1}{1+e^{-z}}</script><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>$h_{\theta}(x)$ 的作用是，对于给定的输入变量，根据选择的参数计算输出变量=1 的可能性(estimated probablity) 即 $h_{\theta}(x)=P(y=1 \mid x ; \theta)$<br>例如，如果对于给定的 $x,$ 通过已经确定的参数计算得出 $h_{\theta}(x)=0.7,$ 则表示有 $70 \%$ 的几率 $y$ 为正向类，相应地 $y$ 为负向类的几率为 1-0.7=0.3。</p><h2 id="3-判定边界Decision-Boundary"><a href="#3-判定边界Decision-Boundary" class="headerlink" title="3.判定边界Decision Boundary"></a>3.判定边界Decision Boundary</h2><p>现在假设我们有一个模型:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201205224807.png" alt="image-20201205224807126"></p><p>可以选直线：</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201205224836.png" alt="image-20201205224836663"></p><p>但其他的比如边界的圆形：</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201205224903.png" alt="image-20201205224903704"></p><p>我们可以用非常复杂的模型来适应非常复杂形状的判定边界</p><h2 id="4-代价函数Cost-Function"><a href="#4-代价函数Cost-Function" class="headerlink" title="4.代价函数Cost Function"></a>4.代价函数Cost Function</h2><p>如何拟合逻辑回归模型的参数𝜃。具体来说，拟合参数的优化目标或者叫代价函数，这便是监督学习问题中的逻辑回归模型的拟合问题。</p><p>对于线性回归模型，我们定义的代价函数是所有模型误差的平方和。理论上来说，我们也可以对逻辑回归模型沿用这个定义，但是问题在于，当我们将 $h_{\theta}(x)=\frac{1}{1+e^{-\theta} T_{X}}$ 带入到这样定义了的代价函数中时，我们得到的代价函数将是一个非凸函数（non-convexfunction），这意味着我们的代价函数有许多局部最小值，这将影响梯度下降算法寻找全局最小值。</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201205225126.png" alt="image-20201205225126378"></p><p>线性回归的代价函数为:</p><script type="math/tex; mode=display">J(\theta)=\frac{1}{m} \sum_{i=1}^{m} \frac{1}{2}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}</script><p>我们重新定义逻辑回归的代价函数为:</p><script type="math/tex; mode=display">J(\theta)=\frac{1}{m} \sum_{i=1}^{m} \operatorname{cost}\left(h_{\theta}\left(x^{(i)}\right), y^{(i)}\right)</script><p>其中，</p><script type="math/tex; mode=display">\operatorname{cost}\left(h_{\theta}(x), y\right)=\left\{\begin{aligned}-\log \left(h_{\theta}(x)\right) & \text { if } y=1 \\-\log \left(1-h_{\theta}(x)\right) & \text { if } y=0\end{aligned}\right.</script><p>$h_{\theta}(x)$ 与 $\operatorname{cost}\left(h_{\theta}(x), y\right)$ 之间的关系如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201205225317.png" alt="image-20201205225317462"></p><p>这样构建的 $\operatorname{cost}\left(h_{\theta}(x), y\right)$ 函数的特点是：当实际的 $y=1$ 且 $h_{\theta}(x)$ 也为 1 时误差为 0 ,当 $y=1$ 但 $h_{\theta}(x)$ 不为 1 时误差随着 $h_{\theta}(x)$ 变小而变大; 当实际的 $y=0$ 且 $h_{\theta}(x)$ 也为 0 时代价为 $0,$ 当 $y=0$ 但 $h_{\theta}(x)$ 不为 0 时误差随着 $h_{\theta}(x)$ 的变大而变大。将构建的 $\operatorname{cost}\left(h_{\theta}(x), y\right)$ 简化如下:</p><script type="math/tex; mode=display">\operatorname{cost}\left(h_{\theta}(x), y\right)=-y \times \log \left(h_{\theta}(x)\right)-(1-y) \times \log \left(1-h_{\theta}(x)\right)</script><p>带入代价函数得到:</p><script type="math/tex; mode=display">J(\theta)=\frac{1}{m} \sum_{i=1}^{m}\left[-y^{(i)} \log \left(h_{\theta}\left(x^{(i)}\right)\right)-\left(1-y^{(i)}\right) \log \left(1-h_{\theta}\left(x^{(i)}\right)\right)\right]</script><p>即: </p><script type="math/tex; mode=display">J(\theta)=-\frac{1}{m} \sum_{i=1}^{m}\left[y^{(i)} \log \left(h_{\theta}\left(x^{(i)}\right)\right)+\left(1-y^{(i)}\right) \log \left(1-h_{\theta}\left(x^{(i)}\right)\right)\right]</script><p>Python代码实现为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">def</span> <span class="token function">cost</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  theta <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>  X <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>X<span class="token punctuation">)</span>  y <span class="token operator">=</span> np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>y<span class="token punctuation">)</span>  first <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token operator">-</span>y<span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>sigmoid<span class="token punctuation">(</span>X<span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  second <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> sigmoid<span class="token punctuation">(</span>X<span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>first <span class="token operator">-</span> second<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在得到这样一个代价函数以后，我们便可以用梯度下降算法来求得能使代价函数最小的参数了。算法为:</p><script type="math/tex; mode=display">\theta_{j}:=\theta_{j}-\alpha \frac{\partial}{\partial \theta_{j}} J(\theta)</script><p>求导后：</p><script type="math/tex; mode=display">\theta_{j}:=\theta_{j}-\alpha \frac{1}{m} \sum_{i=1}^{m}\left(h_{\theta}\left(\mathrm{x}^{(i)}\right)-\mathrm{y}^{(i)}\right) \mathrm{x}_{j}^{(i)}</script><p>代价函数𝐽(𝜃)会是一 个凸函数，并且没有局部最优值。推导过程:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201205230522.png" alt="image-20201205230522918"></p><p>所以：</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201205230500.png" alt="image-20201205230500427"></p><p>虽然得到的梯度下降算法表面上看上去与线性回归的梯度下降算法一样，但是这里的$h_𝜃(𝑥) = 𝑔(𝜃^𝑇𝑋)$与线性回归中不同，所以实际上是不一样的。另外，在运行梯度下降算法 之前，进行特征缩放依旧是非常必要的。一些梯度下降算法之外的选择: 除了梯度下降算法以外，还有一些常被用来令代价函数最小的算法，这些算法更加复杂和优越，而且通常不需要人工选择学习率，通常比梯度下降算法要更加快速。这些算法有:共轭梯度（Conjugate Gradient），局部优化法（Broyden fletcher goldfarb shann,BFGS）和有限内存局部优化法（LBFGS）</p><h2 id="5-梯度下降"><a href="#5-梯度下降" class="headerlink" title="5.梯度下降"></a>5.梯度下降</h2><p>和之前的线性回归类似:</p><script type="math/tex; mode=display">\theta_{j}:=\theta_{j}-\alpha \frac{1}{m} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right) x_{j}^{(i)}</script><p>但是现在逻辑函数假设函数: $h_{\theta}(x)=\frac{1}{1+e^{-\theta} T_{X}}$，即使更新参数的规则看起来基本相同，但由于假设的定义发生了变化，所以逻辑函数的梯度下降，跟线性回归的梯度下降实际上是两个完全不同的东西。</p><h2 id="6-高级优化"><a href="#6-高级优化" class="headerlink" title="6.高级优化"></a>6.高级优化</h2><p>然而梯度下降并不是我们可以使用的唯一算法，还有其他一些算法，更高级、更复杂。如果我们能用这些方法来计算代价函数 $J(\theta)$ 和偏导数项 $\frac{\partial}{\partial \theta_{j}} J(\theta)$ 两个项的话，那么这些算法就是为我们优化代价函数的不同方法，共轩梯度法 BFGS （变尺度法）和 L-BFGS （限制变尺度法）就是其中一些更高级的优化算法，它们需要有一种方法来计算 𝐽(𝜃)，以及需要一种方法 计算导数项，然后使用比梯度下降更复杂的算法来最小化代价函数。</p><h2 id="7-多类别分类-一对多"><a href="#7-多类别分类-一对多" class="headerlink" title="7.多类别分类:一对多"></a>7.多类别分类:一对多</h2><p>然而对于之前的一个，二元分类问题，我们的数据看起来可能是像这样:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206000542.png" alt="image-20201206000542702"></p><p>对于一个多类分类问题，我们的数据集或许看起来像这样:</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206000556.png" alt="image-20201206000556885"></p><p>我们现在已经知道如何进行二元分类，可以使用逻辑回归，对于直线或许你也知道，可以将数据集一分为二为正类和负类。用一对多的分类思想，我们可以将其用在多类分类问题 上。下面将介绍如何进行一对多的分类工作，有时这个方法也被称为”一对余”方法。</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206000949.png" alt="image-20201206000949232"></p><p>方法就是将多分类问题转化成多个二分类问题，例如上图先把除了三角形的全视为一类，转化成一个二分类问题。为了能实现这样的转变，我们将多个类中的一个类标记为正向类（ $y=1$） ，然后将其他所有类都标记为负向类，这个模型记作 $h_{\theta}^{(1)}(x)_{\circ}$ 接着，类似地第我们选择另一个类标记为正向类 $(y=2)$ ，再将其它类都标记为负向类，将这个模型记作 $h_{\theta}^{(2)}(x)$,依此类推。最后我们得到一系列的模型简记为: $\quad h_{\theta}^{(i)}(x)=p(y=i \mid x ; \theta)$ 其中: $i=(1,2,3 \ldots k)$</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206001229.png" alt="image-20201206001229747"></p><p>最后，将所有的分类机都运行一遍，然后对每一个输入变量， 都选择最高可能性的输出变量。</p>]]></content>
      
      
      <categories>
          
          <category> 吴恩达——机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达 </tag>
            
            <tag> 逻辑回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter_03_Dictionaries_and_Sets</title>
      <link href="2020/12/03/python/fluentpython/chapter-03-dictionaries-and-sets/"/>
      <url>2020/12/03/python/fluentpython/chapter-03-dictionaries-and-sets/</url>
      
        <content type="html"><![CDATA[<h2 id="3-1-dict"><a href="#3-1-dict" class="headerlink" title="3.1 dict"></a>3.1 dict</h2><h3 id="泛映射类型"><a href="#泛映射类型" class="headerlink" title="泛映射类型"></a>泛映射类型</h3><ul><li>collections.abc中有Mapping和MutableMapping这两个抽象类，作用dict的接口<br><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201201112313.png" alt="Mutable Mapping"></li><li>dict只有<strong>可散列的</strong>数据类型才能作用这些映射里的键</li><li>可散列对象需要实现__hash__,__eq__</li><li>str，bytes，frozenset是可散列的，如果tuple中所有元素是可散列的，那么tuple也是可散列的</li><li>一般用户自定义的类型对象都是可散列的，id()函数的返回值就是散列值</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">tt<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">)</span>tt<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>-2725224101759650258</p><hr><p>TypeError Traceback (most recent call last)</p><p><ipython-input-1-083a0773f165> in <module>       2 print(hash(tt))<br>      3 tt=(1,2,[3,4])<br>——&gt; 4 print(hash(tt))<br>TypeError: unhashable type: ‘list’</module></ipython-input-1-083a0773f165></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dict的创建方式</span>a <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> three<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>c <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>a<span class="token operator">==</span>b<span class="token operator">==</span>c<span class="token operator">==</span>d<span class="token operator">==</span>e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>True</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dict 推导</span>DIAL_CODES <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">,</span> <span class="token string">'China'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token string">'India'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'United States'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">,</span> <span class="token string">'Indonesia'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">'Brazil'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">,</span> <span class="token string">'Pakistan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">880</span><span class="token punctuation">,</span> <span class="token string">'Bangladesh'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span> <span class="token string">'Nigeria'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Russia'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token string">'Japan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>country_code <span class="token operator">=</span> <span class="token punctuation">{</span>country<span class="token punctuation">:</span> code <span class="token keyword">for</span> code<span class="token punctuation">,</span> country <span class="token keyword">in</span> DIAL_CODES<span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>country_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>{‘China’: 86, ‘India’: 91, ‘United States’: 1, ‘Indonesia’: 62, ‘Brazil’: 55, ‘Pakistan’: 92, ‘Bangladesh’: 880, ‘Nigeria’: 234, ‘Russia’: 7, ‘Japan’: 81}</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#d.get(k,default)来代替d[k],如果没有查找到就返回默认值</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> reWORD_RE <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\w+'</span><span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'poetry.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token keyword">for</span> line_no<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> match <span class="token keyword">in</span> WORD_RE<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>            word <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>            column_no <span class="token operator">=</span> match<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            location <span class="token operator">=</span> <span class="token punctuation">(</span>line_no<span class="token punctuation">,</span> column_no<span class="token punctuation">)</span>            occurrences <span class="token operator">=</span> index<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#</span>            occurrences<span class="token punctuation">.</span>append<span class="token punctuation">(</span>location<span class="token punctuation">)</span>            index<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> occurrences<span class="token keyword">for</span> word <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> index<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>a [(1, 22), (2, 7), (3, 6), (8, 7), (8, 27), (10, 19), (12, 6), (17, 20), (21, 19)]<br>A [(17, 1)]<br>above [(34, 34)]<br>ago [(1, 29), (15, 36)]<br>all [(26, 30), (43, 9)]<br>and [(1, 13), (6, 17), (8, 15), (11, 6), (13, 16), (25, 21), (29, 13), (44, 37)]<br>And [(5, 1), (15, 1), (20, 4), (34, 1), (41, 1), (43, 1)]<br>angels [(24, 5), (34, 17)]<br>Annabel [(4, 19), (11, 13), (18, 17), (29, 28), (37, 21), (40, 21), (42, 21)]<br>as [(26, 27)]<br>away [(20, 17)]<br>be [(6, 21)]<br>beams [(39, 20)]<br>beautiful [(18, 7), (37, 11), (40, 11), (42, 11)]<br>blew [(17, 8)]<br>bore [(20, 8)]<br>bride [(44, 44)]<br>bright [(41, 42)]<br>bringing [(39, 35)]<br>But [(10, 1), (31, 1)]<br>but [(41, 27)]<br>by [(2, 17), (6, 30), (9, 20), (16, 20), (22, 20), (27, 20), (28, 37), (31, 30), (43, 40), (45, 27), (46, 16)]<br>By [(4, 4)]<br>came [(19, 30), (28, 15)]<br>Can [(36, 1)]<br>child [(8, 9), (8, 29)]<br>chilling [(17, 29)]<br>Chilling [(29, 4)]<br>cloud [(17, 22), (28, 31)]<br>Coveted [(13, 4)]<br>darling [(44, 10), (44, 21)]<br>demons [(35, 12)]<br>dissever [(36, 10)]<br>down [(35, 19), (43, 35)]<br>dreams [(39, 47)]<br>envying [(25, 9)]<br>ever [(36, 5)]<br>eyes [(41, 49)]<br>far [(31, 33), (33, 12)]<br>feel [(41, 33)]<br>For [(39, 1)]<br>from [(20, 22), (36, 27)]<br>half [(24, 17)]<br>happy [(24, 25)]<br>Heaven [(12, 40), (24, 34), (34, 27)]<br>her [(13, 12), (19, 9), (20, 13), (21, 9), (25, 17), (45, 7), (46, 7)]<br>highborn [(19, 13)]<br>I [(8, 1), (11, 4), (41, 31), (43, 29)]<br>In [(2, 4), (9, 4), (16, 4), (22, 4), (27, 4), (45, 4), (46, 4)]<br>in [(21, 16), (24, 31), (34, 24)]<br>It [(1, 1)]<br>it [(31, 14)]<br>killing [(29, 17)]<br>kingdom [(2, 9), (9, 12), (16, 12), (22, 12), (27, 12)]<br>kinsmen [(19, 22)]<br>know [(3, 40), (26, 38)]<br>Lee [(4, 27), (11, 21), (18, 25), (29, 36), (37, 29), (40, 29), (42, 29)]<br>lie [(43, 31)]<br>life [(44, 32)]<br>lived [(3, 21), (5, 21)]<br>long [(15, 31)]<br>love [(6, 12), (10, 21), (10, 45), (12, 8), (31, 9), (31, 46)]<br>loved [(6, 24), (10, 8)]<br>maiden [(3, 8), (5, 10)]<br>many [(1, 8), (1, 17), (33, 7)]<br>may [(3, 36)]<br>me [(6, 33), (13, 20), (20, 27), (25, 25), (39, 44)]<br>men [(26, 34)]<br>moon [(39, 9)]<br>more [(10, 35)]<br>my [(11, 10), (29, 25), (36, 19), (44, 7), (44, 18), (44, 29), (44, 41)]<br>My [(18, 4)]<br>name [(4, 11)]<br>neither [(34, 5)]<br>never [(39, 14), (41, 15)]<br>night [(28, 40), (43, 17)]<br>no [(5, 32)]<br>Nor [(35, 4)]<br>not [(24, 13)]<br>of [(4, 16), (12, 37), (17, 17), (28, 24)]<br>Of [(32, 4), (33, 4), (37, 4), (40, 4), (42, 4), (44, 4)]<br>older [(32, 22)]<br>other [(5, 35)]<br>our [(31, 5)]<br>out [(17, 13), (28, 20)]<br>reason [(15, 18), (26, 19)]<br>rise [(41, 21)]<br>sea [(2, 24), (9, 27), (16, 27), (22, 27), (27, 27), (35, 34), (45, 34), (46, 32)]<br>sepulchre [(21, 21), (45, 11)]<br>seraphs [(12, 29)]<br>she [(5, 17), (8, 19)]<br>shut [(21, 4)]<br>side [(43, 47)]<br>So [(19, 1)]<br>so [(24, 22), (43, 5)]<br>soul [(36, 22), (36, 36)]<br>sounding [(46, 23)]<br>stars [(41, 9)]<br>stronger [(31, 21)]<br>Than [(6, 4)]<br>than [(10, 40), (31, 37), (32, 28), (33, 22)]<br>That [(3, 1), (28, 1)]<br>that [(10, 26), (12, 13), (15, 25), (19, 4), (26, 6)]<br>the [(2, 20), (4, 7), (9, 23), (12, 18), (15, 14), (16, 23), (22, 23), (26, 15), (27, 23), (28, 6), (28, 27), (31, 42), (34, 13), (35, 8), (35, 30), (36, 32), (37, 7), (39, 5), (40, 7), (41, 5), (41, 38), (42, 7), (43, 13), (43, 43), (45, 30), (46, 19)]<br>The [(24, 1)]<br>there [(3, 15), (45, 21)]<br>this [(5, 5), (9, 7), (15, 5), (16, 7), (22, 7), (27, 7)]<br>those [(32, 7)]<br>thought [(5, 41)]<br>tide [(43, 23)]<br>to [(6, 9)]<br>To [(21, 1)]<br>tomb [(46, 11)]<br>under [(35, 24)]<br>up [(21, 13)]<br>was [(1, 4), (8, 3), (8, 23), (10, 31), (15, 10), (26, 11), (31, 17)]<br>we [(10, 5), (32, 33), (33, 27)]<br>Went [(25, 4)]<br>were [(32, 17)]<br>who [(32, 13)]<br>whom [(3, 27)]<br>wind [(17, 3), (28, 10)]<br>wingèd [(12, 22)]<br>wiser [(33, 16)]<br>with [(5, 27), (10, 14)]<br>With [(12, 1)]<br>without [(39, 27)]<br>year [(1, 24)]<br>Yes [(26, 1)]<br>you [(3, 32)]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#用setdefault处理找不到的键</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> reWORD_RE <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\w+'</span><span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'poetry.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token keyword">for</span> line_no<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> match <span class="token keyword">in</span> WORD_RE<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>            word <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>            column_no <span class="token operator">=</span> match<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            location <span class="token operator">=</span> <span class="token punctuation">(</span>line_no<span class="token punctuation">,</span> column_no<span class="token punctuation">)</span>            index<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token keyword">for</span> word <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> index<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>a [(1, 22), (2, 7), (3, 6), (8, 7), (8, 27), (10, 19), (12, 6), (17, 20), (21, 19)]<br>A [(17, 1)]<br>above [(34, 34)]<br>ago [(1, 29), (15, 36)]<br>all [(26, 30), (43, 9)]<br>and [(1, 13), (6, 17), (8, 15), (11, 6), (13, 16), (25, 21), (29, 13), (44, 37)]<br>And [(5, 1), (15, 1), (20, 4), (34, 1), (41, 1), (43, 1)]<br>angels [(24, 5), (34, 17)]<br>Annabel [(4, 19), (11, 13), (18, 17), (29, 28), (37, 21), (40, 21), (42, 21)]<br>as [(26, 27)]<br>away [(20, 17)]<br>be [(6, 21)]<br>beams [(39, 20)]<br>beautiful [(18, 7), (37, 11), (40, 11), (42, 11)]<br>blew [(17, 8)]<br>bore [(20, 8)]<br>bride [(44, 44)]<br>bright [(41, 42)]<br>bringing [(39, 35)]<br>But [(10, 1), (31, 1)]<br>but [(41, 27)]<br>by [(2, 17), (6, 30), (9, 20), (16, 20), (22, 20), (27, 20), (28, 37), (31, 30), (43, 40), (45, 27), (46, 16)]<br>By [(4, 4)]<br>came [(19, 30), (28, 15)]<br>Can [(36, 1)]<br>child [(8, 9), (8, 29)]<br>chilling [(17, 29)]<br>Chilling [(29, 4)]<br>cloud [(17, 22), (28, 31)]<br>Coveted [(13, 4)]<br>darling [(44, 10), (44, 21)]<br>demons [(35, 12)]<br>dissever [(36, 10)]<br>down [(35, 19), (43, 35)]<br>dreams [(39, 47)]<br>envying [(25, 9)]<br>ever [(36, 5)]<br>eyes [(41, 49)]<br>far [(31, 33), (33, 12)]<br>feel [(41, 33)]<br>For [(39, 1)]<br>from [(20, 22), (36, 27)]<br>half [(24, 17)]<br>happy [(24, 25)]<br>Heaven [(12, 40), (24, 34), (34, 27)]<br>her [(13, 12), (19, 9), (20, 13), (21, 9), (25, 17), (45, 7), (46, 7)]<br>highborn [(19, 13)]<br>I [(8, 1), (11, 4), (41, 31), (43, 29)]<br>In [(2, 4), (9, 4), (16, 4), (22, 4), (27, 4), (45, 4), (46, 4)]<br>in [(21, 16), (24, 31), (34, 24)]<br>It [(1, 1)]<br>it [(31, 14)]<br>killing [(29, 17)]<br>kingdom [(2, 9), (9, 12), (16, 12), (22, 12), (27, 12)]<br>kinsmen [(19, 22)]<br>know [(3, 40), (26, 38)]<br>Lee [(4, 27), (11, 21), (18, 25), (29, 36), (37, 29), (40, 29), (42, 29)]<br>lie [(43, 31)]<br>life [(44, 32)]<br>lived [(3, 21), (5, 21)]<br>long [(15, 31)]<br>love [(6, 12), (10, 21), (10, 45), (12, 8), (31, 9), (31, 46)]<br>loved [(6, 24), (10, 8)]<br>maiden [(3, 8), (5, 10)]<br>many [(1, 8), (1, 17), (33, 7)]<br>may [(3, 36)]<br>me [(6, 33), (13, 20), (20, 27), (25, 25), (39, 44)]<br>men [(26, 34)]<br>moon [(39, 9)]<br>more [(10, 35)]<br>my [(11, 10), (29, 25), (36, 19), (44, 7), (44, 18), (44, 29), (44, 41)]<br>My [(18, 4)]<br>name [(4, 11)]<br>neither [(34, 5)]<br>never [(39, 14), (41, 15)]<br>night [(28, 40), (43, 17)]<br>no [(5, 32)]<br>Nor [(35, 4)]<br>not [(24, 13)]<br>of [(4, 16), (12, 37), (17, 17), (28, 24)]<br>Of [(32, 4), (33, 4), (37, 4), (40, 4), (42, 4), (44, 4)]<br>older [(32, 22)]<br>other [(5, 35)]<br>our [(31, 5)]<br>out [(17, 13), (28, 20)]<br>reason [(15, 18), (26, 19)]<br>rise [(41, 21)]<br>sea [(2, 24), (9, 27), (16, 27), (22, 27), (27, 27), (35, 34), (45, 34), (46, 32)]<br>sepulchre [(21, 21), (45, 11)]<br>seraphs [(12, 29)]<br>she [(5, 17), (8, 19)]<br>shut [(21, 4)]<br>side [(43, 47)]<br>So [(19, 1)]<br>so [(24, 22), (43, 5)]<br>soul [(36, 22), (36, 36)]<br>sounding [(46, 23)]<br>stars [(41, 9)]<br>stronger [(31, 21)]<br>Than [(6, 4)]<br>than [(10, 40), (31, 37), (32, 28), (33, 22)]<br>That [(3, 1), (28, 1)]<br>that [(10, 26), (12, 13), (15, 25), (19, 4), (26, 6)]<br>the [(2, 20), (4, 7), (9, 23), (12, 18), (15, 14), (16, 23), (22, 23), (26, 15), (27, 23), (28, 6), (28, 27), (31, 42), (34, 13), (35, 8), (35, 30), (36, 32), (37, 7), (39, 5), (40, 7), (41, 5), (41, 38), (42, 7), (43, 13), (43, 43), (45, 30), (46, 19)]<br>The [(24, 1)]<br>there [(3, 15), (45, 21)]<br>this [(5, 5), (9, 7), (15, 5), (16, 7), (22, 7), (27, 7)]<br>those [(32, 7)]<br>thought [(5, 41)]<br>tide [(43, 23)]<br>to [(6, 9)]<br>To [(21, 1)]<br>tomb [(46, 11)]<br>under [(35, 24)]<br>up [(21, 13)]<br>was [(1, 4), (8, 3), (8, 23), (10, 31), (15, 10), (26, 11), (31, 17)]<br>we [(10, 5), (32, 33), (33, 27)]<br>Went [(25, 4)]<br>were [(32, 17)]<br>who [(32, 13)]<br>whom [(3, 27)]<br>wind [(17, 3), (28, 10)]<br>wingèd [(12, 22)]<br>wiser [(33, 16)]<br>with [(5, 27), (10, 14)]<br>With [(12, 1)]<br>without [(39, 27)]<br>year [(1, 24)]<br>Yes [(26, 1)]<br>you [(3, 32)]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 映射的弹性键选择、</span><span class="token comment"># 利用defaultdict</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict<span class="token keyword">import</span> reWORD_RE <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\w+'</span><span class="token punctuation">)</span>index <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'poetry.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token keyword">for</span> line_no<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> match <span class="token keyword">in</span> WORD_RE<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>            word <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>            column_no <span class="token operator">=</span> match<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            location <span class="token operator">=</span> <span class="token punctuation">(</span>line_no<span class="token punctuation">,</span> column_no<span class="token punctuation">)</span>            index<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token keyword">for</span> word <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> index<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>a [(1, 22), (2, 7), (3, 6), (8, 7), (8, 27), (10, 19), (12, 6), (17, 20), (21, 19)]<br>A [(17, 1)]<br>above [(34, 34)]<br>ago [(1, 29), (15, 36)]<br>all [(26, 30), (43, 9)]<br>and [(1, 13), (6, 17), (8, 15), (11, 6), (13, 16), (25, 21), (29, 13), (44, 37)]<br>And [(5, 1), (15, 1), (20, 4), (34, 1), (41, 1), (43, 1)]<br>angels [(24, 5), (34, 17)]<br>Annabel [(4, 19), (11, 13), (18, 17), (29, 28), (37, 21), (40, 21), (42, 21)]<br>as [(26, 27)]<br>away [(20, 17)]<br>be [(6, 21)]<br>beams [(39, 20)]<br>beautiful [(18, 7), (37, 11), (40, 11), (42, 11)]<br>blew [(17, 8)]<br>bore [(20, 8)]<br>bride [(44, 44)]<br>bright [(41, 42)]<br>bringing [(39, 35)]<br>But [(10, 1), (31, 1)]<br>but [(41, 27)]<br>by [(2, 17), (6, 30), (9, 20), (16, 20), (22, 20), (27, 20), (28, 37), (31, 30), (43, 40), (45, 27), (46, 16)]<br>By [(4, 4)]<br>came [(19, 30), (28, 15)]<br>Can [(36, 1)]<br>child [(8, 9), (8, 29)]<br>chilling [(17, 29)]<br>Chilling [(29, 4)]<br>cloud [(17, 22), (28, 31)]<br>Coveted [(13, 4)]<br>darling [(44, 10), (44, 21)]<br>demons [(35, 12)]<br>dissever [(36, 10)]<br>down [(35, 19), (43, 35)]<br>dreams [(39, 47)]<br>envying [(25, 9)]<br>ever [(36, 5)]<br>eyes [(41, 49)]<br>far [(31, 33), (33, 12)]<br>feel [(41, 33)]<br>For [(39, 1)]<br>from [(20, 22), (36, 27)]<br>half [(24, 17)]<br>happy [(24, 25)]<br>Heaven [(12, 40), (24, 34), (34, 27)]<br>her [(13, 12), (19, 9), (20, 13), (21, 9), (25, 17), (45, 7), (46, 7)]<br>highborn [(19, 13)]<br>I [(8, 1), (11, 4), (41, 31), (43, 29)]<br>In [(2, 4), (9, 4), (16, 4), (22, 4), (27, 4), (45, 4), (46, 4)]<br>in [(21, 16), (24, 31), (34, 24)]<br>It [(1, 1)]<br>it [(31, 14)]<br>killing [(29, 17)]<br>kingdom [(2, 9), (9, 12), (16, 12), (22, 12), (27, 12)]<br>kinsmen [(19, 22)]<br>know [(3, 40), (26, 38)]<br>Lee [(4, 27), (11, 21), (18, 25), (29, 36), (37, 29), (40, 29), (42, 29)]<br>lie [(43, 31)]<br>life [(44, 32)]<br>lived [(3, 21), (5, 21)]<br>long [(15, 31)]<br>love [(6, 12), (10, 21), (10, 45), (12, 8), (31, 9), (31, 46)]<br>loved [(6, 24), (10, 8)]<br>maiden [(3, 8), (5, 10)]<br>many [(1, 8), (1, 17), (33, 7)]<br>may [(3, 36)]<br>me [(6, 33), (13, 20), (20, 27), (25, 25), (39, 44)]<br>men [(26, 34)]<br>moon [(39, 9)]<br>more [(10, 35)]<br>my [(11, 10), (29, 25), (36, 19), (44, 7), (44, 18), (44, 29), (44, 41)]<br>My [(18, 4)]<br>name [(4, 11)]<br>neither [(34, 5)]<br>never [(39, 14), (41, 15)]<br>night [(28, 40), (43, 17)]<br>no [(5, 32)]<br>Nor [(35, 4)]<br>not [(24, 13)]<br>of [(4, 16), (12, 37), (17, 17), (28, 24)]<br>Of [(32, 4), (33, 4), (37, 4), (40, 4), (42, 4), (44, 4)]<br>older [(32, 22)]<br>other [(5, 35)]<br>our [(31, 5)]<br>out [(17, 13), (28, 20)]<br>reason [(15, 18), (26, 19)]<br>rise [(41, 21)]<br>sea [(2, 24), (9, 27), (16, 27), (22, 27), (27, 27), (35, 34), (45, 34), (46, 32)]<br>sepulchre [(21, 21), (45, 11)]<br>seraphs [(12, 29)]<br>she [(5, 17), (8, 19)]<br>shut [(21, 4)]<br>side [(43, 47)]<br>So [(19, 1)]<br>so [(24, 22), (43, 5)]<br>soul [(36, 22), (36, 36)]<br>sounding [(46, 23)]<br>stars [(41, 9)]<br>stronger [(31, 21)]<br>Than [(6, 4)]<br>than [(10, 40), (31, 37), (32, 28), (33, 22)]<br>That [(3, 1), (28, 1)]<br>that [(10, 26), (12, 13), (15, 25), (19, 4), (26, 6)]<br>the [(2, 20), (4, 7), (9, 23), (12, 18), (15, 14), (16, 23), (22, 23), (26, 15), (27, 23), (28, 6), (28, 27), (31, 42), (34, 13), (35, 8), (35, 30), (36, 32), (37, 7), (39, 5), (40, 7), (41, 5), (41, 38), (42, 7), (43, 13), (43, 43), (45, 30), (46, 19)]<br>The [(24, 1)]<br>there [(3, 15), (45, 21)]<br>this [(5, 5), (9, 7), (15, 5), (16, 7), (22, 7), (27, 7)]<br>those [(32, 7)]<br>thought [(5, 41)]<br>tide [(43, 23)]<br>to [(6, 9)]<br>To [(21, 1)]<br>tomb [(46, 11)]<br>under [(35, 24)]<br>up [(21, 13)]<br>was [(1, 4), (8, 3), (8, 23), (10, 31), (15, 10), (26, 11), (31, 17)]<br>we [(10, 5), (32, 33), (33, 27)]<br>Went [(25, 4)]<br>were [(32, 17)]<br>who [(32, 13)]<br>whom [(3, 27)]<br>wind [(17, 3), (28, 10)]<br>wingèd [(12, 22)]<br>wiser [(33, 16)]<br>with [(5, 27), (10, 14)]<br>With [(12, 1)]<br>without [(39, 27)]<br>year [(1, 24)]<br>Yes [(26, 1)]<br>you [(3, 32)]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用__missing__处理</span><span class="token keyword">import</span> collections<span class="token keyword">class</span> <span class="token class-name">StrKeyDict</span><span class="token punctuation">(</span>collections<span class="token punctuation">.</span>UserDict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__missing__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__contains__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>data    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 字典的变种</span><span class="token comment"># collections.OrderedDict，键值会排序，可以用popitem</span><span class="token comment"># collections.ChainMap，可以容纳多个dict，一并查询</span><span class="token comment"># collections.Counter,计数器</span><span class="token comment"># collection.UserDict 纯python实现的dict，更方便我们做dict扩展</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counterct <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token string">"sdsadcsadsadaaasdsac"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span>ct<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'wewqewq'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span>ct<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Counter({‘a’: 7, ‘s’: 6, ‘d’: 5, ‘c’: 2})<br>Counter({‘a’: 7, ‘s’: 6, ‘d’: 5, ‘w’: 3, ‘c’: 2, ‘e’: 2, ‘q’: 2})</p><p>[(‘a’, 7), (‘s’, 6), (‘d’, 5), (‘w’, 3), (‘c’, 2), (‘e’, 2), (‘q’, 2)]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 不可变映射类型</span><span class="token keyword">from</span> types <span class="token keyword">import</span> MappingProxyTyped <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">}</span>d_proxy <span class="token operator">=</span> MappingProxyType<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_proxy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_proxy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>A</p><hr><p>KeyError Traceback (most recent call last)</p><p><ipython-input-12-d4ae1d057cd0> in <module>       4 d_proxy = MappingProxyType(d)<br>      5 print(d_proxy[1])<br>——&gt; 6 print(d_proxy[2])</module></ipython-input-12-d4ae1d057cd0></p><p>KeyError: 2</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'B'</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_proxy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>B</p></blockquote><h2 id="3-2-set"><a href="#3-2-set" class="headerlink" title="3.2 set"></a>3.2 set</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#集合的本质是许多唯一对象的聚集，可以用于去重</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token builtin">set</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&gt;</p><blockquote><p>{‘a’, ‘b’, ‘c’}</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#集合的运算符</span>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>{1, 2, 3, 4, 5, 6}<br>{3, 4}<br>{1, 2}<br>{1, 2, 5, 6}</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> unicodedata <span class="token keyword">import</span> name<span class="token punctuation">{</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">236</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">'SIGN'</span> <span class="token keyword">in</span> name<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>{‘#’,<br>‘$’,<br>‘%’,<br>‘+’,<br>‘&lt;’,<br>‘=’,<br>‘&gt;’,<br>‘¢’,<br>‘£’,<br>‘¤’,<br>‘¥’,<br>‘§’,<br>‘©’,<br>‘¬’,<br>‘®’,<br>‘°’,<br>‘±’,<br>‘µ’,<br>‘¶’,<br>‘×’}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> FluentPython </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01_线性回归_Linear_Regression</title>
      <link href="2020/12/02/machinelearning/wu-en-da-ji-qi-xue-xi/linear-regression/"/>
      <url>2020/12/02/machinelearning/wu-en-da-ji-qi-xue-xi/linear-regression/</url>
      
        <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>回归本质上是利用离散的值来试着推测出一个连续值的结果，对其他值进行预测</p><h2 id="1-单变量线性回归（Linear-Regression-with-One-Variable）"><a href="#1-单变量线性回归（Linear-Regression-with-One-Variable）" class="headerlink" title="1 单变量线性回归（Linear Regression with One Variable）"></a>1 单变量线性回归（Linear Regression with One Variable）</h2><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201202232210.png" alt="image-20201202232210402"></p><h3 id="1-1-例子房价预测问题："><a href="#1-1-例子房价预测问题：" class="headerlink" title="1.1 例子房价预测问题："></a>1.1 例子房价预测问题：</h3><p>假使回归问题的训练集(Training Set)如下表所示</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201202232330.png" alt="image-20201202232330802"></p><p>我们将要用来描述这个回归问题的标记如下: </p><ul><li><p>$𝑚$代表训练集中实例的数量</p></li><li><p>$𝑥$ 代表特征/输入变量</p></li><li>$𝑦$ 代表目标变量/输出变量</li><li>$(𝑥,𝑦)$ 代表训练集中的实例</li><li>$(𝑥^{(𝑖)},𝑦^{(𝑖)})$代表第$𝑖$ 个观察实例</li><li>$h$ 代表学习算法的解决方案或函数也称为假设(hypothesis)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201202232830.png" alt="image-20201202232830677"></p><p>我们该如何表达 h?</p><p>一种可能的表达方式为:$h_𝜃(𝑥) = 𝜃_0 + 𝜃_1𝑥$，因为只含有一个特征/输入变量，因此这样 的问题叫作单变量线性回归问题。</p><h3 id="1-2-代价函数"><a href="#1-2-代价函数" class="headerlink" title="1.2 代价函数"></a>1.2 代价函数</h3><h4 id="误差定义："><a href="#误差定义：" class="headerlink" title="误差定义："></a>误差定义：</h4><p>预测值与实际值的的差距。$h_𝜃(x)-y$</p><h4 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h4><p>对于$h_𝜃(𝑥) = 𝜃_0 + 𝜃_1𝑥$，目的是找到两个变量$𝜃_0,𝜃_1$来使得整体误差的值最小，即误差平方和最小，代价公式为：</p><script type="math/tex; mode=display">MSE=J\left(\theta_{0}, \theta_{1}\right)=\frac{1}{2 m} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}</script><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201202233929.png" alt="image-20201202233929481"></p><h3 id="1-3-梯度下降"><a href="#1-3-梯度下降" class="headerlink" title="1.3 梯度下降"></a>1.3 梯度下降</h3><p>批量梯度下降(batch gradient descent):</p><script type="math/tex; mode=display">\begin{aligned}&\text { repeat until convergence \{}\\&\theta_{j}:=\theta_{j}-\alpha \frac{\partial}{\partial \theta_{j}} J\left(\theta_{0}, \theta_{1}\right) \quad(\text { for } j=0 \text { and } j=1)\\&\text{\}}\end{aligned}</script><p>其中$𝑎$是学习率(learning rate)，它决定了我们沿着能让代价函数下降程度最大的方向 向下迈出的步子有多大，在批量梯度下降中，我们每一次都同时让所有的参数减去学习速率乘以代价函数的导数，参数更新的步骤如下</p><script type="math/tex; mode=display">\begin{array}{l}\text { temp } 0:=\theta_{0}-\alpha \frac{\partial}{\partial \theta_{0}} J\left(\theta_{0}, \theta_{1}\right) \\\text { templ }:=\theta_{1}-\alpha \frac{\partial}{\partial \theta_{1}} J\left(\theta_{0}, \theta_{1}\right) \\\theta_{0}:=\text { temp } 0 \\\theta_{1}:=\text { temp } 1\end{array}</script><ul><li>$a$太小收敛速度太慢</li><li>$a$太大可能不收敛</li></ul><h3 id="1-4-梯度下降的线性回归"><a href="#1-4-梯度下降的线性回归" class="headerlink" title="1.4 梯度下降的线性回归"></a>1.4 梯度下降的线性回归</h3><script type="math/tex; mode=display">\begin{array}{c}\frac{\partial}{\partial \theta_{j}} J\left(\theta_{0}, \theta_{1}\right)=\frac{\partial}{\partial \theta_{j}} \frac{1}{2 m} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2} \\j=0 \text { 时: } \frac{\partial}{\partial \theta_{0}} J\left(\theta_{0}, \theta_{1}\right)=\frac{1}{m} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right) \\j=1 \text { 时: } \quad \frac{\partial}{\partial \theta_{1}} J\left(\theta_{0}, \theta_{1}\right)=\frac{1}{m} \sum_{i=1}^{m}\left(\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right) \cdot x^{(i)}\right)\end{array}</script><h2 id="2-多变量线性回归-Linear-Regression-with-Multiple-Variables"><a href="#2-多变量线性回归-Linear-Regression-with-Multiple-Variables" class="headerlink" title="2 多变量线性回归(Linear Regression with Multiple Variables)"></a>2 多变量线性回归(Linear Regression with Multiple Variables)</h2><p>对上面的模型增加更多的特征，模型中的特征为$(x_1,x_2,….,x_n)$</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201203163630.png" alt="image-20201203150333545"></p><p>增添更多特征后，我们引入一系列新的注释:</p><ul><li><p>$𝑛$ 代表特征的数量</p></li><li><p>$𝑥^{(𝑖)}$代表第 $𝑖$ 个训练实例，是特征矩阵中的第$𝑖$行，是一个向量(vector)。</p></li><li><p>比方说，上图的</p><script type="math/tex; mode=display">x^{(2)}=\left[\begin{array}{c}1416 \\3 \\2 \\40\end{array}\right]</script></li><li><p>$𝑥^{(𝑖)}_j$代表特征矩阵中第$ 𝑖$ 行的第$𝑗$个特征，也就是第 𝑖 个训练实例的第 𝑗 个特征。</p></li><li><p>如上图的$\mid x_{2}^{(2)}=3, x_{3}^{(2)}=2$</p></li><li><p>支持多变量的假设 h 表示为:$h_{\theta}(x)=\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}+\ldots+\theta_{n} x_{n}$</p></li><li><p>这个公式中有𝑛 + 1个参数和𝑛个变量，为了使得公式能够简化一些，引入$𝑥_0 = 1$，则公 式转化为:$h_{\theta}(x)=\theta_{0} x_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}+\ldots+\theta_{n} x_{n}$</p></li><li><p>此时模型中的参数是一个$𝑛 + 1$维的向量，任何一个训练实例也都是𝑛 + 1维的向量，特 征矩阵𝑋的维度是 $𝑚 ∗ (𝑛 + 1)$。 因此公式可以简化为:$h_𝜃(𝑥) = 𝜃^𝑇𝑋$，其中上标𝑇代表矩阵转置。</p></li></ul><h3 id="2-1-多变量梯度下降Gradient-Descent-for-Multiple-Variables"><a href="#2-1-多变量梯度下降Gradient-Descent-for-Multiple-Variables" class="headerlink" title="2.1 多变量梯度下降Gradient Descent for Multiple Variables"></a>2.1 多变量梯度下降Gradient Descent for Multiple Variables</h3><p>与单变量线性回归类似，在多变量线性回归中，我们也构建一个代价函数，则这个代价 函数是所有建模误差的平方和，即:</p><script type="math/tex; mode=display">J\left(\theta_{0}, \theta_{1} \ldots \theta_{n}\right)=\frac{1}{2 m} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}</script><p>梯度下降算法求导后：</p><p>Repeat：</p><script type="math/tex; mode=display">\theta_{j}:=\theta_{j}-\alpha \frac{1}{m} \sum_{i=1}^{m}\left(\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right) \cdot x_{j}^{(i)}\right)</script><p>( simultaneously update  $\theta_{j}$$ \text { for } \mathrm{j}=0,1, \ldots, \mathrm{n})$</p><p>计算Cost函数Python代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">computeCost</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">:</span>  inner <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>X <span class="token operator">*</span> theta<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-梯度下降法实践-1-特征缩放"><a href="#2-2-梯度下降法实践-1-特征缩放" class="headerlink" title="2.2 梯度下降法实践 1-特征缩放"></a>2.2 梯度下降法实践 1-特征缩放</h3><p>Gradient Descent in Practice I - Feature Scaling</p><p>在我们面对多维特征问题的时候，我们要保证这些特征都具有相近的尺度，这将帮助梯度下降算法更快地收敛，解决的方法是尝试将所有特征的尺度都尽量缩放到-1到1之间。</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201203153342.png" alt="image-20201203153342751"></p><p>最简单的方法是令:$x_{n}=\frac{x_{n}-\mu_{n}}{s_{n}},$ 其中 $\mu_{n}$ 是平均值, $s_{n}$ 是标准差。</p><h3 id="2-3-梯度下降法实践-2-学习率"><a href="#2-3-梯度下降法实践-2-学习率" class="headerlink" title="2.3 梯度下降法实践 2-学习率"></a>2.3 梯度下降法实践 2-学习率</h3><p>Gradient Descent in Practice II - Learning Rate</p><p>梯度下降算法的每次迭代受到学习率的影响，如果学习率𝑎过小，则达到收敛所需的迭 代次数会非常高;如果学习率𝑎过大，每次迭代可能不会减小代价函数，可能会越过局部最 小值导致无法收敛。</p><h3 id="2-4-特征和多项式回归"><a href="#2-4-特征和多项式回归" class="headerlink" title="2.4 特征和多项式回归"></a>2.4 特征和多项式回归</h3><p>线性回归并不适用于所有数据，有时我们需要曲线来适应我们的数据，比如一个二次方模型: $h_{\theta}(x)=\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}^{2}$<br>或者三次方模型: $\quad h_{\theta}(x)=\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}^{2}+\theta_{3} x_{3}^{3}$</p><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201203155639.png" alt="image-20201203155639868"></p><p>通常我们需要先观察数据然后再决定准备尝试怎样的模型。 另外，我们可以令：$x_{2}=x_{2}^{2}, x_{3}=x_{3}^{3},$ 从而将模型转化为线性回归模型。</p><p>从而将模型转化为线性回归模型。</p><h3 id="2-5-正规方程"><a href="#2-5-正规方程" class="headerlink" title="2.5 正规方程"></a>2.5 正规方程</h3><p>正规方程是通过求解下面的方程来找出使得代价函数最小的参数的 $： \frac{\partial}{\partial \theta_{j}} J\left(\theta_{j}\right)=0$，假设我们的训练集特征矩阵为 X（包含了 $x_{0}=1$ ）并且我们的训练集结果为向量 y，则利用正规方程解出向量 $\theta=\left(X^{T} X\right)^{-1} X^{T} y$ 。上标 T 代表矩阵转置，上标-1 代表矩阵的逆。设矩阵 $A=X^{T} X,$ 则: $\left(X^{T} X\right)^{-1}=A^{-1}$</p><p> 梯度下降与正规方程的比较:</p><div class="table-container"><table><thead><tr><th style="text-align:left">梯度下降</th><th>正规方程</th></tr></thead><tbody><tr><td style="text-align:left">需要选择学习率𝛼</td><td>不需要</td></tr><tr><td style="text-align:left">需要多次迭代</td><td>一次运算得出</td></tr><tr><td style="text-align:left">当特征数量𝑛大时也能较好适用</td><td>需要计算 $\left(X^{T} X\right)^{-1}$ 如果特征数量 $n$ 较大则运算代价大, 因为矩阵逆的计算时间复杂度 为 $O\left(n^{3}\right),$ 通常来说当n小于10000 时还是 可以接受的</td></tr><tr><td style="text-align:left">适用于各种类型的模型</td><td>只适用于线性模型，不适合逻辑回归模型等 其他模型</td></tr></tbody></table></div><p>正规方程的python实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">def</span> <span class="token function">normalEqn</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  theta <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>X<span class="token punctuation">.</span>T@X<span class="token punctuation">)</span>@X<span class="token punctuation">.</span>T@y <span class="token comment">#X.T@X 等价于 X.T.dot(X) </span>  <span class="token keyword">return</span> theta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 吴恩达——机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达 </tag>
            
            <tag> 线性回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter_02_An_Array_of_Sequences</title>
      <link href="2020/12/02/python/fluentpython/chapter-02-an-array-of-sequences/"/>
      <url>2020/12/02/python/fluentpython/chapter-02-an-array-of-sequences/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-02-An-Array-of-Sequences"><a href="#Chapter-02-An-Array-of-Sequences" class="headerlink" title="Chapter_02_An_Array_of_Sequences"></a>Chapter_02_An_Array_of_Sequences</h1><h2 id="2-1-tuple"><a href="#2-1-tuple" class="headerlink" title="2.1 tuple"></a>2.1 tuple</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表推导式</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">]</span>sizes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">]</span>tshirts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token keyword">for</span> color <span class="token keyword">in</span> colors <span class="token keyword">for</span> size <span class="token keyword">in</span> sizes<span class="token punctuation">]</span>tshirts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[(‘black’, ‘S’),<br> (‘black’, ‘M’),<br> (‘black’, ‘L’),<br> (‘white’, ‘S’),<br> (‘white’, ‘M’),<br> (‘white’, ‘L’)]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表生成器 就是吧[]变成()可以调用next生成</span>tshirts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>size<span class="token punctuation">}</span></span><span class="token string">"</span></span> <span class="token keyword">for</span> color <span class="token keyword">in</span> colors <span class="token keyword">for</span> size <span class="token keyword">in</span> sizes<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tshirts<span class="token punctuation">)</span><span class="token keyword">for</span> tshirt <span class="token keyword">in</span> tshirts<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tshirt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>&lt; generator object &lt; genexpr &gt; at 0x7fb438de0228 &gt; black S<br>black M<br>black L<br>white S<br>white M<br>white L</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 元组的用法</span>lax_coordinates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">33.9425</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">118.408056</span><span class="token punctuation">)</span>city<span class="token punctuation">,</span> year<span class="token punctuation">,</span> pop<span class="token punctuation">,</span> chg<span class="token punctuation">,</span> area <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Tokyo'</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">,</span> <span class="token number">32450</span><span class="token punctuation">,</span> <span class="token number">0.66</span><span class="token punctuation">,</span> <span class="token number">8014</span><span class="token punctuation">)</span>traveler_ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'USA'</span><span class="token punctuation">,</span> <span class="token string">'31195855'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'BRA'</span><span class="token punctuation">,</span> <span class="token string">'CE342567'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'ESP'</span><span class="token punctuation">,</span> <span class="token string">'XDA205856'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> passport <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>traveler_ids<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> passport<span class="token punctuation">)</span><span class="token keyword">for</span> country<span class="token punctuation">,</span> _ <span class="token keyword">in</span> traveler_ids<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>BRA/CE342567<br>ESP/XDA205856<br>USA/31195855<br>USA<br>BRA<br>ESP</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 元组拆包</span>lax_coordinates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">33.9425</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">118.408056</span><span class="token punctuation">)</span>latitude<span class="token punctuation">,</span> longitude <span class="token operator">=</span> lax_coordinates <span class="token comment"># tuple unpacking</span><span class="token keyword">print</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>33.9425 -118.408056</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>quotient<span class="token punctuation">,</span> remainder <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>quotient<span class="token punctuation">,</span> remainder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>2 4</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os_<span class="token punctuation">,</span> filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/home/ctios/.ssh/idrsa.pub'</span><span class="token punctuation">)</span>filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>‘idrsa.pub’</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> <span class="token operator">*</span>body<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> body<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>(0, [1, 2, 3, 4, 5, 6, 7], 8, 9)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">metro_areas <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">'Tokyo'</span><span class="token punctuation">,</span><span class="token string">'JP'</span><span class="token punctuation">,</span><span class="token number">36.933</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">35.689722</span><span class="token punctuation">,</span><span class="token number">139.691667</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'Delhi NCR'</span><span class="token punctuation">,</span> <span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token number">21.935</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">28.613889</span><span class="token punctuation">,</span> <span class="token number">77.208889</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token string">'Mexico City'</span><span class="token punctuation">,</span> <span class="token string">'MX'</span><span class="token punctuation">,</span> <span class="token number">20.142</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">19.433333</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">99.133333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'New York-Newark'</span><span class="token punctuation">,</span> <span class="token string">'US'</span><span class="token punctuation">,</span> <span class="token number">20.104</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">40.808611</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">74.020386</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'Sao Paulo'</span><span class="token punctuation">,</span> <span class="token string">'BR'</span><span class="token punctuation">,</span> <span class="token number">19.649</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">23.547778</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">46.635833</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{:15} | {:^9} | {:^9}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'lat.'</span><span class="token punctuation">,</span> <span class="token string">'long.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fmt <span class="token operator">=</span> <span class="token string">'{:15} | {:9.4f} | {:9.4f}'</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> pop<span class="token punctuation">,</span> <span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span> <span class="token keyword">in</span> metro_areas<span class="token punctuation">:</span>     <span class="token keyword">if</span> longitude <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th></th><th>lat.</th><th>long.</th></tr></thead><tbody><tr><td>Mexico City</td><td>19.4333</td><td>-99.1333</td></tr><tr><td>New York-Newark</td><td>40.8086</td><td>-74.0204</td></tr><tr><td>Sao Paulo</td><td>-23.5478</td><td>-46.6358</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 具名元组 namedtuple</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtupleCity <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'City'</span><span class="token punctuation">,</span> <span class="token string">'name country population coordinates'</span><span class="token punctuation">)</span>tokyo <span class="token operator">=</span> City<span class="token punctuation">(</span><span class="token string">'Tokyo'</span><span class="token punctuation">,</span> <span class="token string">'JP'</span><span class="token punctuation">,</span> <span class="token number">36.933</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">35.689722</span><span class="token punctuation">,</span> <span class="token number">139.691667</span><span class="token punctuation">)</span><span class="token punctuation">)</span>City<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Tokyo'</span><span class="token punctuation">,</span> country<span class="token operator">=</span><span class="token string">'JP'</span><span class="token punctuation">,</span> population<span class="token operator">=</span><span class="token number">36.933</span><span class="token punctuation">,</span> coordinates<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">35.689722</span><span class="token punctuation">,</span> <span class="token number">139.691667</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tokyo<span class="token punctuation">,</span> tokyo<span class="token punctuation">.</span>population<span class="token punctuation">,</span> tokyo<span class="token punctuation">.</span>coordinates<span class="token punctuation">,</span> tokyo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>(City(name=’Tokyo’, country=’JP’, population=36.933, coordinates=(35.689722, 139.691667)),<br> 36.933,<br> (35.689722, 139.691667),<br> ‘JP’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 具名元组的属性和方法</span>City<span class="token punctuation">.</span>_fields<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">,</span> <span class="token string">'population'</span><span class="token punctuation">,</span> <span class="token string">'coordinates'</span><span class="token punctuation">)</span>LatLong <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'LatLong'</span><span class="token punctuation">,</span> <span class="token string">'lat long'</span><span class="token punctuation">)</span>delhi_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Delhi NCR'</span><span class="token punctuation">,</span> <span class="token string">'IN'</span><span class="token punctuation">,</span> <span class="token number">21.935</span><span class="token punctuation">,</span> LatLong<span class="token punctuation">(</span><span class="token number">28.613889</span><span class="token punctuation">,</span> <span class="token number">77.208889</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delhi <span class="token operator">=</span> City<span class="token punctuation">.</span>_make<span class="token punctuation">(</span>delhi_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>delhi<span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> delhi<span class="token punctuation">.</span>_asdict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">':'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>City(name=’Delhi NCR’, country=’IN’, population=21.935, coordinates=LatLong(lat=28.613889, long=77.208889))<br>name: Delhi NCR<br>country: IN<br>population: 21.935<br>coordinates: LatLong(lat=28.613889, long=77.208889)</p></blockquote><h2 id="2-2-slice"><a href="#2-2-slice" class="headerlink" title="2.2 slice"></a>2.2 slice</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 切片</span>s <span class="token operator">=</span> <span class="token string">'bicycle'</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>(‘bye’, ‘elcycib’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 切片slice对象，传入seq.__getitem__()</span>invoice <span class="token operator">=</span> <span class="token triple-quoted-string string">"""0.....6.................................40........52...55........1909 Pimoroni PiBrella                      $17.50    3    $52.501489 6mm Tactile Switch x20                 $4.95     2     $9.901510 Panavise Jr. - PV-201                  $28.00    1    $28.001601 PiTFT Mini Kit 320x240                 $34.95    1    $34.95"""</span>SKU <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>DESCRIPTION <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>UNIT_PRICE <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span>QUANTITY <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span>ITEM_TOTAL <span class="token operator">=</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>line_items <span class="token operator">=</span> invoice<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> item <span class="token keyword">in</span> line_items<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span>UNIT_PRICE<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span>DESCRIPTION<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>$17.50 imoroni PiBrella<br>$4.95 6mm Tactile Switch x20<br>$28.00 anavise Jr. - PV-201<br>$34.95 iTFT Mini Kit 320x240             </p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 给切片赋值</span>l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">del</span> l<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>[0, 1, 20, 30, 5, 6, 7, 8, 9]<br>[0, 1, 20, 30, 5, 8, 9]<br>[0, 1, 20, 11, 5, 22, 9]<br>[0, 1, 100, 22, 9]</p></blockquote><h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3 +,,+=,="></a>2.3 +,<em>,+=,</em>=</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对序列使用+，*</span><span class="token comment"># 当a*n 这个语句中，当序列a里面的元素是对其他可变对象的引用，乘法只是赋值多个引用，其中的这些引用都是指向同一个列表，例如</span>board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span>board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span><span class="token keyword">print</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span>weird_board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span>weird_board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token keyword">print</span><span class="token punctuation">(</span>weird_board<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[[‘_’, ‘_’, ‘_’], [‘_’, ‘_’, ‘_’], [‘_’, ‘_’, ‘_’]]<br>[[‘_’, ‘_’, ‘_’], [‘_’, ‘_’, ‘X’], [‘_’, ‘_’, ‘_’]]<br>[[‘_’, ‘_’, ‘0’], [‘_’, ‘_’, ‘0’], [‘_’, ‘_’, ‘0’]]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 增量赋值 +=,*=</span><span class="token comment"># 如果对象实现了__iadd__,__imul__的话，就是在原基础上增加</span><span class="token comment"># 否则就是调用__add__，__mul__，得到一个新对象，例如</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l={}, id={}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l <span class="token operator">*=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l={}, id={}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'t={}, id={}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token builtin">id</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token operator">*=</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'t={}, id={}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token builtin">id</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># l的id没变，t的id变了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>l=[1, 2, 3], id=140216592790216<br>l=[1, 2, 3, 1, 2, 3], id=140216592790216<br>t=(1, 2, 3), id=140216592745168<br>t=(1, 2, 3, 1, 2, 3), id=140216592237672</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 关于+=的谜题</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><hr><p>TypeError raceback (most recent call last)</p><p>&lt; ipython-input-6-b2fc2439c603 &gt; in &lt; module &gt;   1 # 关于+=的谜题<br>  2 t = (1, 2, [30, 40])<br>——&gt; 3 t[2] += [50, 60]</p><p>TypeError: ‘tuple’ object does not support item assignment</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>(1, 2, [30, 40, 50, 60])</p></blockquote><h2 id="2-4-sort-and-bisect"><a href="#2-4-sort-and-bisect" class="headerlink" title="2.4 sort and bisect"></a>2.4 sort and bisect</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># list.sort()和sorted()</span>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">,</span> fruits<span class="token punctuation">)</span>fruits<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>fruits<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token comment"># python中的sort是稳定的，大小一致时，位置不变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># bisect_left, bisect, bisect_right是查找位置，不插入</span><span class="token keyword">from</span> bisect <span class="token keyword">import</span> bisect_left<span class="token punctuation">,</span> bisect<span class="token punctuation">,</span> bisect_righta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>index <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> index<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>index <span class="token operator">=</span> bisect<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> index<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>index <span class="token operator">=</span> bisect_right<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[1, 2, 3, 4] 1<br>[1, 2, 3, 4] 2<br>[1, 2, 3, 4] 2</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># bisect 可以作为索引查询表格</span><span class="token keyword">import</span> bisect<span class="token keyword">def</span> <span class="token function">grade</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> breakpoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grades<span class="token operator">=</span><span class="token string">'FDCBA'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect<span class="token punctuation">(</span>breakpoints<span class="token punctuation">,</span> score<span class="token punctuation">)</span>    <span class="token keyword">return</span> grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>grade<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">for</span> score <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[‘F’, ‘A’, ‘C’, ‘C’, ‘B’, ‘A’, ‘A’]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用bisect.insort插入新元素</span><span class="token keyword">import</span> bisect<span class="token keyword">import</span> randomSIZE <span class="token operator">=</span> <span class="token number">7</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_item <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>SIZE <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> new_item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%2d -&gt;'</span> <span class="token operator">%</span> new_item<span class="token punctuation">,</span> my_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>12 -&gt; [12]<br> 3 -&gt; [3, 12]<br> 1 -&gt; [1, 3, 12]<br> 3 -&gt; [1, 3, 3, 12]<br> 2 -&gt; [1, 2, 3, 3, 12]<br>10 -&gt; [1, 2, 3, 3, 10, 12]<br> 3 -&gt; [1, 2, 3, 3, 3, 10, 12]</p></blockquote><h2 id="2-5-array-and-memoryview"><a href="#2-5-array-and-memoryview" class="headerlink" title="2.5 array and memoryview"></a>2.5 array and memoryview</h2><p>此模块定义了一种对象类型，可以紧凑地表示基本类型值的数组：字符、整数、浮点数等。 数组属于序列类型，其行为与列表非常相似，不同之处在于其中存储的对象类型是受限的。 类型在对象创建时使用单个字符的 <em>类型码</em> 来指定。 已定义的类型码如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型码</th><th style="text-align:left">C 类型</th><th style="text-align:left">Python 类型</th><th style="text-align:left">以字节表示的最小尺寸</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left"><code>'b'</code></td><td style="text-align:left">signed char</td><td style="text-align:left">int</td><td style="text-align:left">1</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'B'</code></td><td style="text-align:left">unsigned char</td><td style="text-align:left">int</td><td style="text-align:left">1</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'u'</code></td><td style="text-align:left">Py_UNICODE</td><td style="text-align:left">Unicode 字符</td><td style="text-align:left">2</td><td style="text-align:left">(1)</td></tr><tr><td style="text-align:left"><code>'h'</code></td><td style="text-align:left">signed short</td><td style="text-align:left">int</td><td style="text-align:left">2</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'H'</code></td><td style="text-align:left">unsigned short</td><td style="text-align:left">int</td><td style="text-align:left">2</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'i'</code></td><td style="text-align:left">signed int</td><td style="text-align:left">int</td><td style="text-align:left">2</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'I'</code></td><td style="text-align:left">unsigned int</td><td style="text-align:left">int</td><td style="text-align:left">2</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'l'</code></td><td style="text-align:left">signed long</td><td style="text-align:left">int</td><td style="text-align:left">4</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'L'</code></td><td style="text-align:left">unsigned long</td><td style="text-align:left">int</td><td style="text-align:left">4</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'q'</code></td><td style="text-align:left">signed long long</td><td style="text-align:left">int</td><td style="text-align:left">8</td><td style="text-align:left">(2)</td></tr><tr><td style="text-align:left"><code>'Q'</code></td><td style="text-align:left">unsigned long long</td><td style="text-align:left">int</td><td style="text-align:left">8</td><td style="text-align:left">(2)</td></tr><tr><td style="text-align:left"><code>'f'</code></td><td style="text-align:left">float</td><td style="text-align:left">float</td><td style="text-align:left">4</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><code>'d'</code></td><td style="text-align:left">double</td><td style="text-align:left">float</td><td style="text-align:left">8</td></tr></tbody></table></div><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> array <span class="token keyword">import</span> array<span class="token keyword">from</span> random <span class="token keyword">import</span> randomfloats<span class="token operator">=</span>array<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>floats<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>0.4585058847207508</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'floats.bin'</span><span class="token punctuation">,</span><span class="token string">'wb+'</span><span class="token punctuation">)</span>floats<span class="token punctuation">.</span>tofile<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>floats2<span class="token operator">=</span>array<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span>fp<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'floats.bin'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>floats2<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">7</span><span class="token punctuation">)</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>floats2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>0.4585058847207508</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">floats<span class="token operator">=</span>array<span class="token punctuation">(</span>floats<span class="token punctuation">.</span>typecode<span class="token punctuation">,</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>floats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>floats<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>array(‘d’, [3.67431575165611e-08, 3.475699940080901e-07, 3.7822653908836656e-07, 4.061706841973489e-07, 6.074053917615174e-07, 6.484837163922563e-07, 6.683984088429185e-07, 7.039884853954348e-07, 7.172446871983595e-07, 7.357147590036917e-07])</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># memeryview</span><span class="token keyword">import</span> this<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one— and preferably only one —obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea — let’s do more of those!</p></blockquote><h2 id="2-6-queue"><a href="#2-6-queue" class="headerlink" title="2.6 queue"></a>2.6 queue</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># deque 双向队列</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> dequedq <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dq<span class="token punctuation">)</span>dq<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dq<span class="token punctuation">)</span>dq<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dq<span class="token punctuation">)</span>dq<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dq<span class="token punctuation">)</span>dq<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)<br>deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)<br>deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], maxlen=10)<br>deque([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)<br>deque([3, 4, 5, 6, 7, 8, 9, 20, 30, 40], maxlen=10)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 优先队列</span><span class="token keyword">import</span> heapq<span class="token keyword">import</span> randoma <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>a<span class="token punctuation">,</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[403, 433, 459, 476, 541, 985, 821, 855, 822, 855]<br>403<br>433<br>459<br>476<br>541<br>821<br>822<br>855<br>855<br>985</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> FluentPython </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter_01_The_Python_Data_Model</title>
      <link href="2020/12/01/python/fluentpython/chapter-01-the-python-data-model/"/>
      <url>2020/12/01/python/fluentpython/chapter-01-the-python-data-model/</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-01-The-Python-Data-Model"><a href="#Chapter-01-The-Python-Data-Model" class="headerlink" title="Chapter_01_The_Python_Data_Model"></a>Chapter_01_The_Python_Data_Model</h1><h2 id="1-1-Playing-Cards"><a href="#1-1-Playing-Cards" class="headerlink" title="1.1 Playing Cards"></a>1.1 Playing Cards</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> collectionsCard <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Card'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rank'</span><span class="token punctuation">,</span> <span class="token string">'suit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FrenchDesk</span><span class="token punctuation">:</span>    ranks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'JQKA'</span><span class="token punctuation">)</span>    suits <span class="token operator">=</span> <span class="token string">'spades diamonds clubs hearts'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_cards <span class="token operator">=</span> <span class="token punctuation">[</span>Card<span class="token punctuation">(</span>rank<span class="token punctuation">,</span> suit<span class="token punctuation">)</span>                       <span class="token keyword">for</span> suit <span class="token keyword">in</span> self<span class="token punctuation">.</span>suits <span class="token keyword">for</span> rank <span class="token keyword">in</span> self<span class="token punctuation">.</span>ranks<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_cards<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_cards<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#访问纸牌对象</span>beer_card <span class="token operator">=</span> Card<span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">)</span>beer_card<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>   Card(rank=’7’, suit=’diamonds’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义了len之后可以查看len</span>desk <span class="token operator">=</span> FrenchDesk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">len</span><span class="token punctuation">(</span>desk<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>   52</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义了getitem可以让对象变成可迭代的</span>desk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>   Card(rank=’2’, suit=’spades’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">desk<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>   Card(rank=’A’, suit=’hearts’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> choicechoice<span class="token punctuation">(</span>desk<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>   Card(rank=’6’, suit=’clubs’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">desk<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>[Card(rank=’2’, suit=’spades’),<br> Card(rank=’3’, suit=’spades’),<br> Card(rank=’4’, suit=’spades’)]</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> card <span class="token keyword">in</span> desk<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Card(rank=’2’, suit=’spades’)<br>Card(rank=’3’, suit=’spades’)<br>Card(rank=’4’, suit=’spades’)<br>Card(rank=’5’, suit=’spades’)<br>Card(rank=’6’, suit=’spades’)<br>Card(rank=’7’, suit=’spades’)<br>Card(rank=’8’, suit=’spades’)<br>Card(rank=’9’, suit=’spades’)<br>Card(rank=’10’, suit=’spades’)<br>Card(rank=’J’, suit=’spades’)<br>Card(rank=’Q’, suit=’spades’)<br>Card(rank=’K’, suit=’spades’)<br>Card(rank=’A’, suit=’spades’)<br>Card(rank=’2’, suit=’diamonds’)<br>Card(rank=’3’, suit=’diamonds’)<br>Card(rank=’4’, suit=’diamonds’)<br>Card(rank=’5’, suit=’diamonds’)<br>Card(rank=’6’, suit=’diamonds’)<br>Card(rank=’7’, suit=’diamonds’)<br>Card(rank=’8’, suit=’diamonds’)<br>Card(rank=’9’, suit=’diamonds’)<br>Card(rank=’10’, suit=’diamonds’)<br>Card(rank=’J’, suit=’diamonds’)<br>Card(rank=’Q’, suit=’diamonds’)<br>Card(rank=’K’, suit=’diamonds’)<br>Card(rank=’A’, suit=’diamonds’)<br>Card(rank=’2’, suit=’clubs’)<br>Card(rank=’3’, suit=’clubs’)<br>Card(rank=’4’, suit=’clubs’)<br>Card(rank=’5’, suit=’clubs’)<br>Card(rank=’6’, suit=’clubs’)<br>Card(rank=’7’, suit=’clubs’)<br>Card(rank=’8’, suit=’clubs’)<br>Card(rank=’9’, suit=’clubs’)<br>Card(rank=’10’, suit=’clubs’)<br>Card(rank=’J’, suit=’clubs’)<br>Card(rank=’Q’, suit=’clubs’)<br>Card(rank=’K’, suit=’clubs’)<br>Card(rank=’A’, suit=’clubs’)<br>Card(rank=’2’, suit=’hearts’)<br>Card(rank=’3’, suit=’hearts’)<br>Card(rank=’4’, suit=’hearts’)<br>Card(rank=’5’, suit=’hearts’)<br>Card(rank=’6’, suit=’hearts’)<br>Card(rank=’7’, suit=’hearts’)<br>Card(rank=’8’, suit=’hearts’)<br>Card(rank=’9’, suit=’hearts’)<br>Card(rank=’10’, suit=’hearts’)<br>Card(rank=’J’, suit=’hearts’)<br>Card(rank=’Q’, suit=’hearts’)<br>Card(rank=’K’, suit=’hearts’)<br>Card(rank=’A’, suit=’hearts’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">Card<span class="token punctuation">(</span><span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'hearts'</span><span class="token punctuation">)</span> <span class="token keyword">in</span> desk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>True</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加上排序的key</span>suits_value <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>spades<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> hearts<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> diamonds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> clubs<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">spades_high</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">:</span>    rank_value <span class="token operator">=</span> FrenchDesk<span class="token punctuation">.</span>ranks<span class="token punctuation">.</span>index<span class="token punctuation">(</span>card<span class="token punctuation">.</span>rank<span class="token punctuation">)</span>    <span class="token keyword">return</span> rank_value<span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>suits_value<span class="token punctuation">)</span><span class="token operator">+</span>suits_value<span class="token punctuation">[</span>card<span class="token punctuation">.</span>suit<span class="token punctuation">]</span><span class="token keyword">for</span> card <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>desk<span class="token punctuation">,</span> key<span class="token operator">=</span>spades_high<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Card(rank=’2’, suit=’clubs’)<br>Card(rank=’2’, suit=’diamonds’)<br>Card(rank=’2’, suit=’hearts’)<br>Card(rank=’2’, suit=’spades’)<br>Card(rank=’3’, suit=’clubs’)<br>Card(rank=’3’, suit=’diamonds’)<br>Card(rank=’3’, suit=’hearts’)<br>Card(rank=’3’, suit=’spades’)<br>Card(rank=’4’, suit=’clubs’)<br>Card(rank=’4’, suit=’diamonds’)<br>Card(rank=’4’, suit=’hearts’)<br>Card(rank=’4’, suit=’spades’)<br>Card(rank=’5’, suit=’clubs’)<br>Card(rank=’5’, suit=’diamonds’)<br>Card(rank=’5’, suit=’hearts’)<br>Card(rank=’5’, suit=’spades’)<br>Card(rank=’6’, suit=’clubs’)<br>Card(rank=’6’, suit=’diamonds’)<br>Card(rank=’6’, suit=’hearts’)<br>Card(rank=’6’, suit=’spades’)<br>Card(rank=’7’, suit=’clubs’)<br>Card(rank=’7’, suit=’diamonds’)<br>Card(rank=’7’, suit=’hearts’)<br>Card(rank=’7’, suit=’spades’)<br>Card(rank=’8’, suit=’clubs’)<br>Card(rank=’8’, suit=’diamonds’)<br>Card(rank=’8’, suit=’hearts’)<br>Card(rank=’8’, suit=’spades’)<br>Card(rank=’9’, suit=’clubs’)<br>Card(rank=’9’, suit=’diamonds’)<br>Card(rank=’9’, suit=’hearts’)<br>Card(rank=’9’, suit=’spades’)<br>Card(rank=’10’, suit=’clubs’)<br>Card(rank=’10’, suit=’diamonds’)<br>Card(rank=’10’, suit=’hearts’)<br>Card(rank=’10’, suit=’spades’)<br>Card(rank=’J’, suit=’clubs’)<br>Card(rank=’J’, suit=’diamonds’)<br>Card(rank=’J’, suit=’hearts’)<br>Card(rank=’J’, suit=’spades’)<br>Card(rank=’Q’, suit=’clubs’)<br>Card(rank=’Q’, suit=’diamonds’)<br>Card(rank=’Q’, suit=’hearts’)<br>Card(rank=’Q’, suit=’spades’)<br>Card(rank=’K’, suit=’clubs’)<br>Card(rank=’K’, suit=’diamonds’)<br>Card(rank=’K’, suit=’hearts’)<br>Card(rank=’K’, suit=’spades’)<br>Card(rank=’A’, suit=’clubs’)<br>Card(rank=’A’, suit=’diamonds’)<br>Card(rank=’A’, suit=’hearts’)<br>Card(rank=’A’, suit=’spades’)</p></blockquote><h2 id="1-2-A-simple-two-dimensional-vector-class"><a href="#1-2-A-simple-two-dimensional-vector-class" class="headerlink" title="1.2 A simple two-dimensional vector class"></a>1.2 A simple two-dimensional vector class</h2><p><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206232143.png" alt="Special method names (operators excluded)"><br><img src="https://cdn.jsdelivr.net/gh/ZqtCtios/Image/img/20201206232143.png" alt="Special method names for operators"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> hypot<span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Vector(</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>x<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>y<span class="token punctuation">}</span></span><span class="token string">)'</span></span>        <span class="token keyword">def</span> <span class="token function">__abs__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hypot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x        y <span class="token operator">=</span> self<span class="token punctuation">.</span>y <span class="token operator">+</span> other<span class="token punctuation">.</span>y        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scalar<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token operator">*</span>scalar<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token operator">*</span>scalar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">v1 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>v2 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Vector(3, 6)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">abs</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2.23606797749979</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">v1<span class="token operator">*</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Vector(3, 6)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> FluentPython </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter_04_Text_versus_Bytes</title>
      <link href="2020/12/01/python/fluentpython/chapter-04-text-versus-bytes/"/>
      <url>2020/12/01/python/fluentpython/chapter-04-text-versus-bytes/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 编码和解码</span>s <span class="token operator">=</span> <span class="token string">'caf中国'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>caf中国 5<br>b’caf\xe4\xb8\xad\xe5\x9b\xbd’ 9<br>caf中国 5</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">'café'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> s1<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token string">'café'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> s2<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>café 5<br>b’cafe\xcc\x81’ 6<br>café 4<br>b’caf\xc3\xa9’ 5</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> unicodedata <span class="token keyword">import</span> normalize<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>normalize<span class="token punctuation">(</span><span class="token string">'NFC'</span><span class="token punctuation">,</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>normalize<span class="token punctuation">(</span><span class="token string">'NFC'</span><span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>4 4</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># bytes和bytearray，bytes存储的是整数</span><span class="token comment"># bytes切片还是bytes对象，bytearray同样</span>cafe <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">'café'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cafe<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cafe<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> b <span class="token keyword">in</span> cafe<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>cafe_arr <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>cafe<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cafe_arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cafe_arr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>b’caf\xc3\xa9’<br>b’c’<br>99<br>97<br>102<br>195<br>169<br>bytearray(b’caf\xc3\xa9’)<br>bytearray(b’\xa9’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> arraynumbers<span class="token operator">=</span>array<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>octets<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>octets<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>b'\xfe\xff\xff\xff\x00\x00\x01\x00\x02\x00'</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 默认编码</span><span class="token keyword">import</span> sys<span class="token punctuation">,</span> localeexpressions <span class="token operator">=</span> <span class="token triple-quoted-string string">"""        locale.getpreferredencoding()        type(my_file)        my_file.encoding        sys.stdout.isatty()        sys.stdout.encoding        sys.stdin.isatty()        sys.stdin.encoding        sys.stderr.isatty()        sys.stderr.encoding        sys.getdefaultencoding()        sys.getfilesystemencoding()"""</span>my_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'dummy'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">for</span> expression <span class="token keyword">in</span> expressions<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'-&gt;'</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> locale.getpreferredencoding() -&gt; ‘UTF-8’<br>                 type(my_file) -&gt; <class '_io.textiowrapper'=""><br>              my_file.encoding -&gt; ‘UTF-8’<br>           sys.stdout.isatty() -&gt; False<br>           sys.stdout.encoding -&gt; ‘UTF-8’<br>            sys.stdin.isatty() -&gt; False<br>            sys.stdin.encoding -&gt; ‘UTF-8’<br>           sys.stderr.isatty() -&gt; False<br>           sys.stderr.encoding -&gt; ‘UTF-8’<br>      sys.getdefaultencoding() -&gt; ‘utf-8’<br>   sys.getfilesystemencoding() -&gt; ‘utf-8’</class></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> FluentPython </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
